{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Tadaaapickr","body":"tadaaapickr\r\n===========\r\n\r\nA lightweight, accessible jQuery DatePicker, styled with Bootstrap.. Tadaaa !!\r\n\r\n* View the project page : http://zipang.github.com/tadaaapickr\r\n* Try the demos : http://zipang.github.com/tadaaapickr/examples/testpage.html\r\n* Fork it on github : http://github.com/zipang/tadaaapickr\r\n\r\n### Features\r\n\r\n- Full keyboard navigation\r\n\t* Arrows keys navigate inside the calendar space\r\n\t* CTRL+arrows keys navigate in the months/years space\r\n\t* ESC key restore the native input value\r\n- Full extensible internationalization support\r\n- Lightweight markup. By default, only _one_ calendar is used on a whole page even with different locales.\r\n- Super fast and responsive, even under IE6/7\r\n- Programmable API\r\n\r\n\r\nInstallation / Usage\r\n--------------------\r\n\r\n### Basics\r\n\r\nExtract the tadaaapickr folder into your project folder. The `css/` and `dist/` subdirectories contain the files you must include.\r\n\r\nAdd the references to the stylesheet and to the packed minified version in your page:\r\n\r\n    <link href=\"css/tadaaapickr.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n    <script  src=\"dist/tadaaapickr.pack.min.js\" type=\"text/javascript\"></script>\r\n\r\n\r\nCreate one ore more text input to tie the plugin to:\r\n\r\n    <input type=\"text\" id=\"txtDate\" />\r\n    <input type=\"text\" class=\"date french\" id=\"txtFrenchDate\" />\r\n\r\n\r\nFinally bind the plugin to the input textbox like this:\r\n\r\n```javascript\r\n    $(\"#txtDate\").datepicker();\r\n```\r\n\r\nor like that, if you want to pass some options :\r\n\r\n```javascript\r\n    $(\"input.date.french\").datepicker({\r\n        dateFormat: \"dd/mm/yyyy\",\r\n        language: \"fr\"\r\n    });\r\n```\r\n\r\n### Internationalization (i18n settings)\r\n\r\nSeveral options are related to the internationalization of the dates, `language` being the most obvious one because it defines the way both months and days will be displayed.\r\n\r\n<table>\r\n\t<thead><tr><th>Option</th><th>Type</th><th>Description</th><th>Default</th></tr></thead>\r\n\t<tbody>\r\n\t\t<tr><td><code>language</code></td><td><code>String</code></td><td>A 2 letters ISO 639-1 code defining the language to be used for day and months representation. </td><td><code>en</code> (english)</td></tr>\r\n\t\t<tr><td><code>dateFormat</code></td><td><code>String</code></td><td>Defining the input format. d, dd, m, mm, yy, yyyy are the usual suspects to define the format parts. </td><td><code>mm/dd/yyyy</code></td></tr>\r\n\t\t<tr><td><code>firstDayOfWeek</code></td><td><code>Number</code></td><td>Number between 0 and 6 to define the first day of the week. </td><td><code>0</code> (Sunday)</td></tr>\r\n\t</tbody>\r\n</table>\r\n\r\nThese options can be set individually, but as we know, they are usually related. In France for example, we usually speak french, we have a date format where the days come first (which seems more logical in fact) and, like in the Bible, the first day of our week is Monday.\r\n\r\nHopefully, the internationalization files bundled with tadaaapickr come with some defaults settings for these 3 attributes and the way to access these default settings is to use the `locale` option.\r\n\r\nSo that the following call :\r\n\r\n```javascript\r\n    $(\"input.date.french\").datepicker({\r\n        dateFormat: \"dd/mm/yyyy\",\r\n        firstDayOfWeek: 1,\r\n        language: \"fr\"\r\n    });\r\n```\r\n\r\nis equivalent to specifying only the `locale` option :\r\n\r\n```javascript\r\n    $(\"input.date.french\").datepicker({\r\n        locale: \"fr\"\r\n    });\r\n```\r\n\r\nIf all your date pickers have the same locale settings (there is a great chance for that in fact) then, you can set it once and for all and forget about it in the subsequent calls.\r\nThis gives us the third equivalent formulation of the 2 precedent examples :\r\n\r\n```javascript\r\n\t$.fn.datepicker.Calendar.setDefaultLocale(\"fr\");\r\n\t$(\"input.date.french\").datepicker();\r\n\t$(\"#startDate\").datepicker({startDate: '01/01/2000'}); // will also get the french locale\r\n```\r\n\r\n### Date picker events\r\n\r\nOnly one event is generated so far to take effect on user's interaction.\r\n\r\nThis event is `dateChange` and it occurs when the user click on a new date in the calendar, when he presses ENTER or TAB when on a new date. The event is not fired when the user moves inside the calendar with the arrows keys.\r\n\r\nThis is how you register an event handler with the new jQuery 1.7 `.on()` syntax.\r\n\r\n```javascript\r\n\t$(\"#myPicker\")\r\n\t\t.datepicker(); // initialize a date picker\r\n\t\t.on(\"dateChange\", function(e) {\r\n\t\t\tvar newDate = e.date;\r\n\t\t\tconsole.log(\"Date changed on myPicker : \" + newDate);\r\n\t\t});\r\n```\r\n\tNote : tadaaapickr is effectively dependant on jQuery 1.7\r\n\r\n### Date picker API\r\n\r\nThe tadaaapicker calendar plugin exposes a set of public methods usefull to control it programmatically and integrate it inside another component.\r\n\r\nFor example, if you want to change the current date, or change any predefined options, you can do it programmatically in two ways :\r\n\r\nThe first way is to use the jQuery selector syntax to access some input elements that have allready been initialiazed as date pickers, and to send them new commands that can be chained the jQuery way :\r\n\r\n```javascript\r\n\t// Narrow our date picker to events that occured during the French Revolution\r\n\t$(\"input#frenchRevolutionEvents\")\r\n\t\t.datepicker(\"setStartDate\", \"05/05/1789\")\t// Estates-General of 1789\r\n\t\t.datepicker(\"setDate\", \"14/07/1789\") \t\t// Storming of the Bastille\r\n\t\t.datepicker(\"setEndDate\", \"20/06/1791\");\t// Flight to Varennes\r\n```\r\n\r\nThis allows to send commands to multiple items at the same time.\r\n\r\nThe second -more traditional- way, is to access the Calendar object defined on any initialized datepicker that way :\r\n\r\n```javascript\r\n\t// Get the underlying Calendar object bound to each input\r\n\tvar frenchCalendar = $(\"input#frenchRevolutionEvents\").data(\"calendar\");\r\n\tfrenchCalendar // Narrow our date picker to events during the French Revolution\r\n\t\t.setStartDate(new Date(1789, 5, 5))\r\n\t\t.setDate(new Date(1989, 7, 14));\r\n\t\t.setEndDate(new Date(1981, 6, 20))\r\n```\r\n\r\n> Note that in both invocation modes, methods expecting _date_ parameters can be passed real Date objects _or_ a String representing the date in the datepicker's declared format.\r\n\r\n<table>\r\n\t<thead><tr><th>Method name</th><th>Description</th></tr></thead>\r\n\t<tbody>\r\n\t\t<tr><td><code>setDate(Date)</code></td><td>Set a new date as the current datepicker's value. The date will be displayed in the datepicker's format. The event dateChange will be triggered to any event handler.</td></tr>\r\n\t\t<tr><td><code>setStartDate(Date)</code></td><td>Specify the first available date for selection in the datepicker's calendar.Date manually input before this limit will be ignored.</td></tr>\r\n\t\t<tr><td><code>setEndDate(Date)</code></td><td>Specify the last available date for selection in the datepicker's calendar. Date manually input beyond this limit will be ignored.</td></tr>\r\n\t</tbody>\r\n</table>\r\n\r\n\r\n\r\nAcknowledgements\r\n----------------\r\n\r\nThis plugin would not have been made without the precedent awesome work of :\r\n\r\n* [Stefan Petre](http://www.eyecon.ro) and [Andrew Rowls](https://github.com/eternicode) who started the first versions <sup>[1], [2]</sup> of a date picker styled with Bootstrap.\r\n* [Gautam Lad](https://github.com/glad) for the way its glDatePicker methods can be called via the same jQuery syntax.\r\n* [John Resig](https://github.com/jeresig) because he gave us jQuery, and we forgot about Prototype..\r\n\r\n[1]: http://www.eyecon.ro/bootstrap-datepicker\r\n[2]: https://github.com/eternicode/bootstrap-datepicker\r\n\r\n\r\nLicense\r\n-------\r\n\r\nCopyright (c) 2012 Christophe Desguez.  All rights reserved.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n","tagline":"A jQuery DatePicker, styled with Bootstrap.. Tadaaa !!","google":""}